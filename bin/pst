#!/usr/bin/env bash

# shellcheck disable=2030,2031

App=PST
app=${App,,}
APP=${app^^}
ROOT=${APP}_ROOT
[[ ${!ROOT-} ]] || {
  echo "Error: $ROOT not set."
  echo "Try: 'source ${0/bin\/pst/.rc}"
  exit 1
}

source "${!ROOT}/.bpan/lib/bpan.bash" --
bpan:use prelude
bpan:use getopt

# https://gist.github.com/ingydotnet/9e229bd583687bc62854c7575f88a8bc
# is the `--help` output from all the package managers used here.
# Many command ideas came from there.

getopt="\
$app [<$app-opts>] <cmd> [<cmd-opts>] [<cmd-args>]
$app --help       # This overview
$app help         # Full documentation for $app
$app help <cmd>   # Documentation for a command

Try:
  $ $app version --all
  $ $app shell

Project Commands:
  new           Create a new project/package
  build         Build the project
  test          Run the project tests
  run           Run project's main function
  register      Register a new project
  publish       Publish the project package
  repo          Show project repo information
  update        Update template files and deps
  deps          List declared deps
  fetch         Install declared deps
  add           Add a package dep to a project
  rm            Remove a package dependency
  clean         Remove the build files and dirs
  lint          Run linters for project
  fmt           Run code formatters for project
  bench         Run benchmarks
  bump          Bump the project version
  change        Add a changelog entry

Language Commands:
  list          List all the supported languages
  repl          Start a REPL for the language
  version       Show version(s) of language tools
  info          Get info about a language + tools
  login         Login to language host system
  whoami        Show your user info for host
  lsp           Start LSP server

Package Commands:
  search        Search for published packages
  install       Install a package
  uninstall     Uninstall a package
  meta          Show meta info for a package
  doc           Show documentation for package
  source        Shell into a package source dir
  url           Show URL(s) for a package
  star          Star a package
  unstar        Unstar a package
  watch         Watch a package
  unwatch       Unwatch a package

System Commands:
  shell         Start $app shell for package
  exec          Run a shell command on $app server
  config        Configure $app
  system        Show $app system information
  upgrade       Upgrade the $app command
  server        --start, --stop, --status --restart
  prune         Remove various $app artifacts
  init          Print shell init source
  complete      Print shell completion source

Information Commands:
  help          Get help for a command
  cmds          List available commands

Command Aliases:
commands        = cmds
compile         = build
look            = source
release         = publish

Options:
--
R,restart     Restart server before command
f,force       Force an action
r,root        Run server commands as root

v,verbose     Print more output
q,quiet       Print less output

h,help        Show the command summary
V,version     Display $app version
x,debug       Print lots of debugging info
"

main() (
  get-options "$@"; set -- "${args[@]}"

  if $option_restart; then
    source "$root/lib/cmd/server.bash"
    option_all=false server:restart
  fi

  func=$command:main

  "$func" "$@"
)

run() (
  if $option_root; then
    docker_args+=(--user=root)
    cmd=("$@")
  else
    docker_args+=(--user=user)
    cmd=("$@")
    # cmd=("/$app/lib/docker/bin/shell-init" "$@")
  fi

  docker_server_id=$(get-docker-server-id)

  $option_verbose && set -x

  docker exec -it \
    "${docker_args[@]}" \
    "$docker_server_id" \
      "${cmd[@]}"
)

lang() (
  get-lang
  source "$root/src/$lang/cmd.bash"
  if func "$lang:$command"; then
    "$lang:$command" "$@"
  elif func "$lang:main"; then
    "$lang:main" "$@"
  else
    if [[ ${getopt_spec-} ]]; then
      getopt -h <<<"$getopt_spec"
    else
      "$lang:meta"
      error "'$Y$app $command$R' not implemented for '$Y$language_name$R'"
    fi
  fi
)

lang:getopt() {
  getopt_spec="\
$app [<$app-opts>] $command <$command-opts>

'$app $command' Options:
--
l,lang=       Programming language for $command
h,help        Get help for $command command
"
}

get-lang() {
  local l

  if [[ ${option_lang-} ]]; then
    lang="$option_lang"
  elif [[ -e project.clj ]]; then
    lang=clojure
  elif [[ -e Project.toml ]]; then
    lang=julia
  elif [[ -e META6.json ]]; then
    lang=raku
  elif [[ -e Gemfile ]]; then
    lang=ruby
  elif [[ ${getopt_spec-} ]]; then
    echo "Can't determine language. Use --lang=..."
    echo
    getopt -h <<<"$getopt_spec"
  else
    error "Can't determine language. Use --lang=..."
  fi

  for l in "${langs[@]}"; do
    if [[ $lang == "$l" ]]; then
      return
    fi
  done

  error "Language '$lang' is not supported by $app"
}

get-config() {
  local var VAR
  for var; do
    VAR=${var^^}
    unset "$VAR"
  done
  source <(
    git config --list --file "$HOME/.$app/config" |
      grep "^lang.$language" |
      cut -d. -f3- |
      perl -pe 's/^(\w+)=/uc($1) . "="/gem'
  )
  for var; do
    [[ ${!VAR-} ]] ||
      error "No value 'lang.$language.$var' found in ~/.$app/config"
  done
}

print-version() (
  cat <<...
$app v$version
Package Super Tool
Copyright 2022 Ingy dÃ¶t Net
https://github.com/ingydotnet/pst
...
)

# XXX shellcheck false positive
# https://github.com/koalaman/shellcheck/issues/680
# shellcheck disable=2128,2178
version() (
  if [[ $# -eq 3 && $3 =~ ^[0-9]+$ ]]; then
    name=$1 cmd=$2 word=$3
    words=($(run "eval $cmd | ansi2txt" || true))
  elif [[ $# -eq 2 && $2 =~ ^[0-9]+$ ]]; then
    name=$1 cmd=$1 word=$2
    words=($(run "$cmd" --version))
  else
    die
  fi

  version=${words[$((word-1))]}
  version=${version%,}

  printf '  %-12s %s\n' "$name:" "$version" | tr -d '\r'
)

get-options() {
  local getopt_default_help=false getopt_args='@args' getopt_debug=debug

  root=${!ROOT}
  version=$(git config -f "$root/.bpan/config" bpan.version)
  [[ -f $root/bin/$app ]] ||
    error "$ROOT variable is has bad value '$root'"

  if [[ $# -eq 0 ]]; then
    set -- --help
  fi

  cmds=($(grep -E '^  \w+  ' <<<"$getopt" | cut -d' ' -f3))

  option_quiet=false
  local words=() want=true
  while [[ $# -gt 0 ]]; do
    if [[ $1 =~ ^(-l|--lang)$ ]]; then
      words+=("$1"); shift
      want=false
      continue
    fi
    if $want && [[ $1 =~ ^[a-z]+$ ]]; then
      command=$1; shift
      [[ " ${cmds[*]} " == *\ $command\ * ]] ||
        error "Invalid $app command '$command'"
      break
    fi
    words+=("$1"); shift
    want=true
  done
  local cmd_opts=("$@")
  set -- "${words[@]}"

  getopt "$@" <<<"$getopt"
  $option_debug && set -x

  args+=("${cmd_opts[@]}")

  if $option_version; then
    print-version
    exit
  fi

  if ! [[ ${command-} ]]; then
    if [[ ${option_server-} ]]; then
      command=server
      server_command=$option_server
      [[ $server_command =~ ^(start|stop|restart|status)$ ]] ||
        error "--server=... must be 'start', 'stop', 'restart' or 'status'"
    elif [[ ${option_run-} ]]; then
      command=run
    else
      error "You must specify a command option"
    fi
  fi

  # Get possible sub-command options:
  source "$root/lib/cmd/$command.bash"
  if func "$command:getopt"; then
    unset sub_command
    local getopt_default_help=false
    local getopt_args='@args'
    local getopt_cmds
    getopt_cmds=()

    "$command:getopt"

    set -- "${args[@]}"
    args=()

    getopt='' getopt "$@" <<<"$getopt_spec"

    if [[ ${#getopt_cmds[*]} -gt 0 ]]; then
      local cmd
      for cmd in "${getopt_cmds[@]}"; do
        local var=option_$cmd
        if "${!var}"; then
          sub_command=$cmd
        fi
      done

      [[ ${sub_command-} ]] ||
        getopt -h <<<"$getopt_spec"
    fi
  fi

  get-vars
}

get-vars() {
  langs=($(cd "$root/src" && echo *))

  base=$(git rev-parse --show-toplevel 2>/dev/null || readlink -f .)

  home=$HOME/.$app
  [[ -d $home ]] || mkdir -p "$home"

  tmp=$home/tmp
  [[ -d $tmp ]] || mkdir -p "$tmp"

  bashrc=$home/bashrc
  [[ -f $bashrc ]] || touch "$bashrc"

  bash_history=$home/bash_history
  touch "$bash_history"

  docker_servers=$home/servers
  [[ -f $docker_servers ]] ||
    touch "$docker_servers"

  docker_image=ingy/$app:$version

  docker_args=(
    --workdir "/host/${PWD#$base}" \
    --env USER=user \
  )
  if $option_debug; then
    docker_args+=(--env "${APP}_SET_X=1")
  fi
}

get-docker-server-id() (
  id=$(grep "^$base"$'\t' "$docker_servers" || true)

  if ! [[ $id ]]; then
    "$app" --quiet server --start || true
    id=$(grep "^$base"$'\t' "$docker_servers" || true)
  fi

  [[ $id ]] || {
    echo-r "No $app Docker server is running for '$base' and couldn't start one"
    exit 1
  }

  read -r dir server_id name <<<"$id"

  echo "$server_id"
)

# XXX shellcheck false positive
# https://github.com/koalaman/shellcheck/issues/2169
# shellcheck disable=2234
func() (
  [[ $(type -t "$1") == function ]]
)

error() {
  echo-r "Error: $*" >&2
  exit 1
}

todo() {
  error "'$app $command' not implemented yet"
}

R='\e[1;31m'
G='\e[1;32m'
Y='\e[1;33m'
Z='\e[0m'
echo-e() ( $option_quiet || echo -e "$*$Z" )
echo-r() ( $option_quiet || echo -e "$R$*$Z" )
echo-g() ( $option_quiet || echo -e "$G$*$Z" )
echo-y() ( $option_quiet || echo -e "$Y$*$Z" )

main "$@"
