.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH "pst" 1 "2022-12-28" "md2man v0.1.0" "Package Super Tool â€” Package Management for All Programming Languages"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "PST"
.IX Header "PST"
Package Super Tool X Package Management for All Programming Languages
.SS "\s-1SYNOPSIS\s0"
.IX Subsection "SYNOPSIS"
.Vb 5
\&    $ pst \-\-help
\&    usage: pst [<pst\-opts>] <cmd> [<cmd\-opts>] [<cmd\-args>]
\&       or: pst \-\-help       # This overview
\&       or: pst help         # Full documentation for pst
\&       or: pst help <cmd>   # Documentation for a command
\&
\&        Try:
\&          $ pst \-\-all version
\&          $ pst shell
\&
\&        Project Commands:
\&          new           Create a new project/package
\&          build         Build the project
\&          test          Run the project tests
\&          run           Run project\*(Aqs main function
\&          register      Register a new project
\&          publish       Publish the project package
\&          repo          Show project repo information
\&          update        Update template files and deps
\&          deps          List declared deps
\&          fetch         Install declared deps
\&          add           Add a package dep to a project
\&          rm            Remove a package dependency
\&          clean         Remove the build files and dirs
\&          lint          Run linters for project
\&          fmt           Run code formatters for project
\&          bench         Run benchmarks
\&          bump          Bump the project version
\&          change        Add a changelog entry
\&
\&        Language Commands:
\&          list          List all the supported languages
\&          repl          Start a REPL for the language
\&          version       Show version(s) of language tools
\&          info          Get info about a language + tools
\&          login         Login to language host system
\&          whoami        Show your user info for host
\&          lsp           Start LSP server
\&
\&        Package Commands:
\&          search        Search for published packages
\&          install       Install a package
\&          uninstall     Uninstall a package
\&          meta          Show meta info for a package
\&          doc           Show documentation for package
\&          source        Shell into a package source dir
\&          url           Show URL(s) for a package
\&          star          Star a package
\&          unstar        Unstar a package
\&          watch         Watch a package
\&          unwatch       Unwatch a package
\&
\&        System Commands:
\&          shell         Start pst shell for package
\&          exec          Run a shell command on pst server
\&          config        Configure pst
\&          system        Show pst system information
\&          upgrade       Upgrade the pst command
\&          server        \-\-start, \-\-stop, \-\-status \-\-restart
\&          prune         Remove various pst artifacts
\&          init          Print shell init source
\&          complete      Print shell completion source
\&
\&        Information Commands:
\&          help          Get help for a command
\&          cmds          List available commands
\&
\&        Command Aliases:
\&        commands        = cmds
\&        compile         = build
\&        look            = source
\&        release         = publish
\&
\&        Options:
\&
\&        \-l, \-\-lang ...        Programming language of package
\&        \-a, \-\-all             Apply cmd to all languages
\&        \-f, \-\-force           Force an action
\&        \-r, \-\-root            Run server commands as root
\&        \-R, \-\-restart         Restart server before command
\&
\&        \-v, \-\-verbose         Print more output
\&        \-q, \-\-quiet           Print less output
\&
\&        \-h, \-\-help            Show the command summary
\&        \-V, \-\-version         Display pst version
\&        \-x, \-\-debug           Print lots of debugging info
.Ve
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
The \f(CW\*(C`pst\*(C'\fR command is a wrapper tool around 38 programming languages and their package managers.
.PP
The current languages are: Ada, Bash, \*(C+, C#, Clojure, CoffeeScript, Common Lisp, Crystal, D, Dart, Deno, Elixir, Erlang, Fortran, Go, Groovy, Guile, Haskell, Haxe, Java, Julia, Lua, Nim, Node.js, Objective C, OCaml, Octave, Perl, \s-1PHP,\s0 Python, R, Racket, Raku, Ruby, Rust, Scala, Swift, TypeScript.
.PP
The \f(CW\*(C`pst\*(C'\fR command provides a consistent \s-1API\s0 that uses the same basic commands, regardless of the target language.
.PP
It provides a working environment to explore, code, test and publish software in any of the languages, or many of them at the same time.
.SS "\s-1INSTALLATION\s0"
.IX Subsection "INSTALLATION"
Installing \s-1PST\s0 is extremely simple:
.PP
.Vb 2
\&    # Clone the PST Git repository:
\&    git clone git@github.com:ingydotnet/pst /path/to/pst
\&
\&    # Run this command and/or add it to your shell rc file:
\&    source /path/to/pst/.rc
\&
\&    # Start using PST:
\&    pst \-\-help
.Ve
.PP
\fIPrerequisites\fR
.IX Subsection "Prerequisites"
.PP
\&\s-1PST\s0 uses Docker to package all the languages (their compilers, runtimes, tools, etc) so that you don't need to install anything except these ubiquitous tools that you very likely have installed on your computer already:
.IP "\(bu" 4
Docker
.IP "\(bu" 4
Bash
.IP "\(bu" 4
Git
.SS "\s-1AUTHORS\s0"
.IX Subsection "AUTHORS"
.IP "\(bu" 4
Ingy do\*:t Net ingy@ingy.net <mailto:ingy@ingy.net>
.SS "\s-1COPYRIGHT AND LICENSE\s0"
.IX Subsection "COPYRIGHT AND LICENSE"
Copyright 2022 by Ingy do\*:t Net
.PP
This is free software, licensed under:
.PP
The \s-1MIT\s0 (X11) License
