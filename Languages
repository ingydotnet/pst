ada:
  name: Ada
  line: The Language for Safe, Secure, Reliable Software
  site: https://www.adacore.com/about-ada
  desc: |
    Ada is a state-of-the art programming language that development teams
    worldwide are using for critical software: from microkernels and
    small-footprint, real-time embedded systems to large-scale enterprise
    applications, and everything in between.
  tool:
    comp: gnat
  pkgs:
    tool: alr
    site: https://alire.ada.dev/
  tags:
  - compiled

bash:
  name: Bash
  line: Bourne Again SHell
  site: https://www.gnu.org/software/bash/
  desc: |
    Bash is the GNU Project's shell—the Bourne Again SHell. This is an
    sh-compatible shell that incorporates useful features from the Korn shell
    (ksh) and the C shell (csh). It is intended to conform to the IEEE POSIX
    P1003.2/ISO 9945.2 Shell and Tools standard. It offers functional
    improvements over sh for both programming and interactive use. In addition,
    most sh scripts can be run by Bash without modification.
  tool:
    run: bash
  pkgs:
    tool: bpan
    site: https://bpan.org/

clisp:
  name: Common Lisp
  line: The Programmable Programming Language
  site: https://common-lisp.net/
  desc: |
    Common Lisp is the modern, multi-paradigm, high-performance, compiled,
    ANSI-standardized, most prominent (along with Scheme) descendant of the
    long-running family of Lisp programming languages.
  tool:
    run: sbcl
  pkgs:
    tool: quicklisp
    site:
    - https://www.quicklisp.org/beta/
    - https://github.com/quicklisp/quicklisp-projects
    info:
    - http://blog.quicklisp.org/2015/01/getting-library-into-quicklisp.html
  tags:
  - dynamic
  - lisp

clojure:
  name: Clojure
  line: Lisp in the JVM
  site: https://clojure.org/
  book: https://www.braveclojure.com/
  desc: |
    Clojure is a dynamic, general-purpose programming language, combining the
    approachability and interactive development of a scripting language with an
    efficient and robust infrastructure for multithreaded programming. Clojure
    is a compiled language, yet remains completely dynamic – every feature
    supported by Clojure is supported at runtime. Clojure provides easy access
    to the Java frameworks, with optional type hints and type inference, to
    ensure that calls to Java can avoid reflection.
  tool:
    run: clojure
  pkgs:
    find: https://clojars.org/
    tool: lein
    repo:
    - https://repo.maven.apache.org/maven2/
    - https://oss.sonatype.org/content/repositories/releases/
  tags:
  - dynamic
  - lisp

cpp:
  name: C++
  line: C with Classes
  site: https://cplusplus.com/
  desc: |
    C++ is a general-purpose programming language created by Danish computer
    scientist Bjarne Stroustrup as an extension of the C programming language.
  tool:
    comp:
    - g++
    - gcc
  pkgs:
    tool:
    - conan
    - gradle
    site: https://conan.io/center/
  tags:
  - compiled

crystal:
  name: Crystal
  line: A Language For Humans and Computers
  site: https://crystal-lang.org/
  desc: |
    Crystal is a general-purpose, object-oriented programming language,
    designed and developed by Ary Borenszweig, Juan Wajnerman, Brian Cardiff
    and more than 300 contributors. With syntax inspired by the language Ruby,
    it is a compiled language with static type-checking, but specifying the
    types of variables or method arguments is generally unneeded. Types are
    resolved by an advanced global type inference algorithm. Crystal is
    currently in active development. It is released as free and open-source
    software under the Apache License version 2.0.
  tool:
    comp: crystal
  pkgs:
    tool: shards
    site: https://shardbox.org/
  tags:
  - compiled

csharp:
  name: 'C#'
  line: An object/component oriented programming language
  site: https://docs.microsoft.com/en-us/dotnet/csharp/
  desc: |
    C# is a general-purpose, multi-paradigm programming language. C#
    encompasses static typing, strong typing, lexically scoped, imperative,
    declarative, functional, generic, object-oriented (class-based), and
    component-oriented programming disciplines.
  tool:
    comp: csc
    run:
    - mono
    - dotnet
  pkgs:
    tool: nuget
    site: https://www.nuget.org/
  tags:
  - compiled

d:
  name: D
  line: A multi-paradigm system programming language
  site: https://dlang.org/
  desc: |
    D, also known as dlang, is a multi-paradigm system programming language
    created by Walter Bright at Digital Mars and released in 2001. Andrei
    Alexandrescu joined the design and development effort in 2007. Though it
    originated as a re-engineering of C++, D is a profoundly different language
    — features of D can be considered streamlined and expanded-upon ideas from
    C++, however D also draws inspiration from other high-level programming
    languages, notably Java, Python, Ruby, C#, and Eiffel.
  tool:
    comp: dmd
  pkgs:
    tool: dub
    site: https://code.dlang.org/
  tags:
  - compiled

dart:
  name: Dart
  line: A client-optimized language for fast apps
  site: https://dart.dev/
  desc: |
    Dart is a programming language designed for client development, such as for
    the web and mobile apps. It is developed by Google and can also be used to
    build server and desktop applications. It is an object-oriented,
    class-based, garbage-collected language with C-style syntax.
  tool:
    comp: dart
  pkgs:
    tool: pub
    site: https://pub.dev/
  tags:
  - compiled

denojs:
  name: Deno
  line: A modern runtime for JavaScript and TypeScript
  site: https://deno.land/
  desc: |
    Deno is a simple, modern and secure runtime for JavaScript, TypeScript, and
    WebAssembly that uses V8 and is built in Rust.

    * Provides web platform functionality and adopts web platform standards.
    * Secure by default. No file, network, or environment access, unless explicitly enabled.
    * Supports TypeScript out of the box.
    * Ships only a single executable file.
  tool:
    run: deno
  pkgs:
    tool: deno
    site: https://deno.land/x
  tags:
  - dynamic

elixir:
  name: Elixir
  line: For building scalable and maintainable applications
  site: https://elixir-lang.org/
  desc: |
    Elixir is a functional, concurrent, general-purpose programming language
    that runs on the BEAM virtual machine which is also used to implement the
    Erlang programming language. Elixir builds on top of Erlang and shares the
    same abstractions for building distributed, fault-tolerant applications.
    Elixir also provides productive tooling and an extensible design. The
    latter is supported by compile-time metaprogramming with macros and
    polymorphism via protocols.
  tool:
    run: elixir
  pkgs:
    tool: hex
    site: https://hex.pm/
  tags:
  - dynamic

fortran:
  name: Fortran
  line: High-performance parallel programming language
  site: https://fortran-lang.org/
  desc: |
    Fortran (formerly FORTRAN) is a general-purpose, compiled imperative
    programming language that is especially suited to numeric computation and
    scientific computing.
  tool:
    comp: gfortran
  pkgs:
    tool: fpm
    site: https://fortran-lang.org/packages/
  tags:
  - compiled

go:
  name: Go
  line: Build fast, reliable, and efficient software at scale
  site: https://go.dev/
  desc: |
    Go is a statically typed, compiled programming language designed at Google
    by Robert Griesemer, Rob Pike, and Ken Thompson. It is syntactically
    similar to C, but with memory safety, garbage collection, structural
    typing, and CSP-style concurrency. It is often referred to as Golang
    because of its former domain name, golang.org, but its proper name is Go.
  tool:
    comp: go
  pkgs:
    tool: go
    site: https://pkg.go.dev/
  tags:
  - compiled

groovy:
  name: Groovy
  line: A multi-faceted language for the Java platform
  site: https://groovy-lang.org/
  desc: |
  tool:
    run: groovy
  pkgs:
    tool: gradle
    site: ???
  tags:
  - dynamic

guile:
  name: Guile
  line: Guile is an extension language platform
  site: https://www.gnu.org/s/guile/
  desc: |
    GNU Ubiquitous Intelligent Language for Extensions (GNU Guile) is the
    preferred extension language system for the GNU Project and features an
    implementation of the programming language Scheme. Its first version was
    released in 1993. In addition to large parts of Scheme standards, Guile
    Scheme includes modularized extensions for many different programming
    tasks.
  tool:
    comp: guile
  pkgs:
    tool: guix
    site: https://guix.gnu.org/
  tags:
  - compiled

haskell:
  name: Haskell
  line: A purely functional programming language
  site: https://www.haskell.org/
  desc: |
    Haskell is a general-purpose, statically-typed, purely functional
    programming language with type inference and lazy evaluation. Designed for
    teaching, research and industrial applications, Haskell has pioneered a
    number of programming language features such as type classes, which enable
    type-safe operator overloading. Haskell's main implementation is the
    Glasgow Haskell Compiler (GHC). It is named after logician Haskell Curry.
  tool:
    comp: ghc
  pkgs:
    tool: cabal
    site: http://hackage.haskell.org/
  tags:
  - compiled

haxe:
  name: Haxe
  line: The Cross-platform Toolkit
  site: https://haxe.org/
  desc: |
    Haxe is an open source high-level cross-platform programming language and
    compiler that can produce applications and source code, for many different
    computing platforms from one code-base. It is free and open-source
    software, released under the MIT License. The compiler, written in OCaml,
    is released under the GNU General Public License (GPL) version 2.
  tool:
    comp: haxe
  pkgs:
    tool: haxelib
    site: https://lib.haxe.org/
  tags:
  - compiled
  - dynamic

java:
  name: Java
  line: Write once, run away
  site: https://www.java.com/
  desc: |
    Java is a high-level, class-based, object-oriented programming language
    that is designed to have as few implementation dependencies as possible. It
    is a general-purpose programming language intended to let programmers write
    once, run anywhere (WORA), meaning that compiled Java code can run on all
    platforms that support Java without the need to recompile. Java
    applications are typically compiled to bytecode that can run on any Java
    virtual machine (JVM) regardless of the underlying computer architecture.
  tool:
    comp: javac
    run: java
  pkgs:
    tool: mvn
    site: https://search.maven.org/
  tags:
  - compiled

julia:
  name: Julia
  line: It just seemed like a pretty name
  site: https://julialang.org/
  desc: |
    Julia is a high-level, high-performance, dynamic programming language.
    While it is a general-purpose language and can be used to write any
    application, many of its features are well suited for numerical analysis
    and computational science.
  tool:
    run: julia
  pkgs:
    tool: pkg
    site: https://juliahub.com/ui/Packages
  tags:
  - dynamic

lua:
  name: Lua
  line: Moon in Portuguese
  site: https://www.lua.org/
  desc: |
    Lua is a powerful, efficient, lightweight, embeddable scripting language.
    It supports procedural programming, object-oriented programming, functional
    programming, data-driven programming, and data description.
  tool:
    run: lua
  pkgs:
    tool: luarocks
    site: https://luarocks.org/
  tags:
  - dynamic

nim:
  name: Nim
  line: Efficient, expressive, elegant
  site: https://nim-lang.org/
  desc: |
    Nim is a general-purpose, multi-paradigm, statically typed, compiled
    systems programming language, designed and developed by a team around
    Andreas Rumpf. Nim is designed to be "efficient, expressive, and elegant",
    supporting metaprogramming, functional, message passing, procedural, and
    object-oriented programming styles by providing several features such as
    compile time code generation, algebraic data types, a foreign function
    interface (FFI) with C, C++, Objective-C, and JavaScript, and supporting
    compiling to those same languages.
  tool:
    comp: nim
  pkgs:
    tool: nimble
    site: https://nimble.directory/
  tags:
  - compiled

nodejs:
  name: Node.js
  line: Node.js is a JavaScript runtime
  site: https://nodejs.org/
  desc: |
    Node.js is an open-source, cross-platform, back-end JavaScript runtime
    environment that runs on the V8 engine and executes JavaScript code outside
    a web browser, which was designed to build scalable network applications.
    Node.js lets developers use JavaScript to write command line tools and for
    server-side scripting—running scripts server-side to produce dynamic web
    page content before the page is sent to the user's web browser.
  tool:
    run: node
  pkgs:
    tool: npm
    site: https://www.npmjs.com/
  tags:
  - dynamic

objc:
  name: Objective C
  line: Adds Smalltalk-style messaging to C
  site: https://en.wikipedia.org/wiki/Objective-C
  desc: |
    Objective-C is a general-purpose, object-oriented programming language that
    adds Smalltalk-style messaging to the C programming language. Originally
    developed by Brad Cox and Tom Love in the early 1980s, it was selected by
    NeXT for its NeXTSTEP operating system. Objective-C was the standard
    programming language supported by Apple for developing macOS (which
    descended from NeXTSTEP) and iOS applications using their respective
    application programming interfaces (APIs), Cocoa and Cocoa Touch, until the
    introduction of Swift in 2014.
  tool:
    comp: clang
  pkgs:
    tool: cocoapods
    site: https://cocoapods.org/
  tags:
  - compiled

ocaml:
  name: OCaml
  line: Functional language with expressiveness and safety
  site: https://ocaml.org/
  desc: |
    OCaml (formerly Objective Caml) is a general-purpose, multi-paradigm
    programming language which extends the Caml dialect of ML with
    object-oriented features. OCaml was created in 1996 by Xavier Leroy, Jérôme
    Vouillon, Damien Doligez, Didier Rémy, Ascánder Suárez, and others.
  tool:
    comp: ocaml
  pkgs:
    tool: opam
    site: https://opam.ocaml.org/packages/
  tags:
  - compiled

octave:
  name: Octave
  line: Scientific Programming Language
  site: https://octave.org/
  desc: |
    GNU Octave is a high-level programming language primarily intended for
    scientific computing and numerical computation. Octave helps in solving
    linear and nonlinear problems numerically, and for performing other
    numerical experiments using a language that is mostly compatible with
    MATLAB. It may also be used as a batch-oriented language. As part of the
    GNU Project, it is free software under the terms of the GNU General Public
    License.
  tool:
    comp: octave
  pkgs:
    tool: pkg
    site: https://octave.sourceforge.io/
  tags:
  - compiled

perl:
  name: Perl
  line: Pathologically Eclectic Rubbish Lister
  site: https://www.perl.org/
  desc: |
    Perl is a general purpose, high level interpreted and dynamic programming
    language. Perl supports both the procedural and Object-Oriented
    programming. Perl is a lot similar to C syntactically and is easy for the
    users who have knowledge of C, C++. Since Perl is a lot similar to other
    widely used languages syntactically, it is easier to code and learn in
    Perl.
  tool:
    run: perl
  pkgs:
    tool:
    - cpan
    - cpanm
    site: https://metacpan.org/
  tags:
  - dynamic

php:
  name: PHP
  line: A popular general-purpose scripting language
  site: https://www.php.net/
  desc: |
    PHP is a general-purpose scripting language geared toward web development.
    It was originally created by Danish-Canadian programmer Rasmus Lerdorf in
    1994. The PHP reference implementation is now produced by The PHP Group.
    PHP originally stood for Personal Home Page, but it now stands for the
    recursive initialism PHP: Hypertext Preprocessor.
  tool:
    run: php
  pkgs:
    tool: composer
    site: https://packagist.org/
  tags:
  - dynamic

python:
  name: Python
  line: A programming language that lets you work quickly
  site: https://www.python.org/
  desc: |
    Python is a high-level, interpreted, general-purpose programming language.
    Its design philosophy emphasizes code readability with the use of
    significant indentation.
  tool:
    run: python
  pkgs:
    tool: pip
    site: https://pypi.org/
  tags:
  - dynamic

r:
  name: R
  line: The R Project for Statistical Computing
  site: https://www.r-project.org/
  desc: |
    R is a programming language for statistical computing and graphics
    supported by the R Core Team and the R Foundation for Statistical
    Computing. Created by statisticians Ross Ihaka and Robert Gentleman, R is
    used among data miners, bioinformaticians and statisticians for data
    analysis and developing statistical software. Users have created packages
    to augment the functions of the R language.
  tool:
    comp: R
  pkgs:
    tool: cran
    site: https://cran.r-project.org/
  tags:
  - compiled

racket:
  name: Racket
  line: The Language-Oriented Programming Language
  site: https://racket-lang.org/
  desc: |
    Racket is a general-purpose, multi-paradigm programming language and a
    multi-platform distribution that includes the Racket language, compiler,
    large standard library, IDE, development tools, and a set of additional
    languages including Typed Racket (a sister language of Racket with a static
    type-checker), Swindle, FrTime, Lazy Racket, R5RS & R6RS Scheme, Scribble,
    Datalog, Racklog, Algol 60 and several teaching languages.
  tool:
    run: racket
  pkgs:
    tool: raco
    site: https://cran.r-project.org/
  tags:
  - dynamic

raku:
  name: Raku
  line: Requires you know how to be nice to all kinds of people
  site: https://www.raku.org/
  desc: |
    Raku is a member of the Perl family of programming languages. Formerly
    known as Perl 6, it was renamed in October 2019. Raku introduces elements
    of many modern and historical languages. Compatibility with Perl was not a
    goal, though a compatibility mode is part of the specification. The design
    process for Raku began in 2000.
  tool:
    run: raku
  pkgs:
    tool: zef
    site: https://modules.raku.org/
  tags:
  - dynamic

ruby:
  name: Ruby
  line: A Programmer's Best Friend
  site: https://www.ruby-lang.org/
  desc: |
    A dynamic, open source programming language with a focus on simplicity and
    productivity. It has an elegant syntax that is natural to read and easy to
    write.
  tool:
    run: ruby
  pkgs:
    tool: gem
    site: https://rubygems.org/
  tags:
  - dynamic

rust:
  name: Rust
  line: A language empowering everyone
  site: https://www.rust-lang.org/
  desc: |
    Rust is a multi-paradigm, general-purpose programming language. Rust
    emphasizes performance, type safety, and concurrency. Rust enforces memory
    safety—that is, that all references point to valid memory—without requiring
    the use of a garbage collector or reference counting present in other
    memory-safe languages.
  tool:
    comp: rustc
  pkgs:
    tool: cargo
    site: https://crates.io/
  tags:
  - compiled

scala:
  name: Scala
  line: The Scala Programming Language
  site: https://www.scala-lang.org/
  desc: |
    Scala combines object-oriented and functional programming in one concise,
    high-level language. Scala's static types help avoid bugs in complex
    applications, and its JVM and JavaScript runtimes let you build
    high-performance systems with easy access to huge ecosystems of libraries.
  tool:
    comp: scala
  pkgs:
    tool: sbt
    site: https://index.scala-lang.org/
  tags:
  - compiled

swift:
  name: Swift
  line: Swift is friendly to new programmers
  site: https://www.swift.org/
  desc: |
    Swift is a general-purpose programming language built using a modern
    approach to safety, performance, and software design patterns. The goal of
    the Swift project is to create the best available language for uses ranging
    from systems programming, to mobile and desktop apps, scaling up to cloud
    services. Most importantly, Swift is designed to make writing and
    maintaining correct programs easier for the developer.
  tool:
    comp: swift
  pkgs:
    tool: swift
    site: https://swiftpackageindex.com/
  tags:
  - compiled

# vim: sw=2:
